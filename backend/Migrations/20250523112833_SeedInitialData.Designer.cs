// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(RestaurantContext))]
    [Migration("20250523112833_SeedInitialData")]
    partial class SeedInitialData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("integer");

                    b.HasKey("CategoryId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Starter",
                            RestaurantId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Main",
                            RestaurantId = 1
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Dessert",
                            RestaurantId = 1
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Side",
                            RestaurantId = 1
                        });
                });

            modelBuilder.Entity("backend.Models.MenuItem", b =>
                {
                    b.Property<int>("MenuItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MenuItemId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("integer");

                    b.HasKey("MenuItemId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            MenuItemId = 1,
                            CategoryId = 1,
                            Description = "Toasted bread with tomatoes",
                            Name = "Bruschetts",
                            Price = 5.00m,
                            RestaurantId = 1
                        },
                        new
                        {
                            MenuItemId = 2,
                            CategoryId = 1,
                            Description = "Fresh seasonal soup",
                            Name = "Soup of the Day",
                            Price = 4.50m,
                            RestaurantId = 1
                        },
                        new
                        {
                            MenuItemId = 3,
                            CategoryId = 2,
                            Description = "Served with vegetables",
                            Name = "Grilled Chicken",
                            Price = 12.50m,
                            RestaurantId = 1
                        },
                        new
                        {
                            MenuItemId = 4,
                            CategoryId = 2,
                            Description = "Ribeye steak with sauce",
                            Name = "Beef Steak",
                            Price = 18.90m,
                            RestaurantId = 1
                        },
                        new
                        {
                            MenuItemId = 5,
                            CategoryId = 3,
                            Description = "Dark chocolate with cream",
                            Name = "Chocolate Cake",
                            Price = 4.00m,
                            RestaurantId = 1
                        },
                        new
                        {
                            MenuItemId = 6,
                            CategoryId = 3,
                            Description = "2 scoops of your choice",
                            Name = "Ice Cream",
                            Price = 3.50m,
                            RestaurantId = 1
                        },
                        new
                        {
                            MenuItemId = 7,
                            CategoryId = 4,
                            Description = "Crispy fries",
                            Name = "French Fries",
                            Price = 3.00m,
                            RestaurantId = 1
                        },
                        new
                        {
                            MenuItemId = 8,
                            CategoryId = 4,
                            Description = "Fresh salad mix",
                            Name = "Side Salad",
                            Price = 3.50m,
                            RestaurantId = 1
                        });
                });

            modelBuilder.Entity("backend.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TableId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("OrderId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("TableId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 15,
                            Name = "Table 7 Order",
                            RestaurantId = 1,
                            Status = 2,
                            TableId = 7,
                            UserId = 1
                        },
                        new
                        {
                            OrderId = 16,
                            Name = "Table 6 Order",
                            RestaurantId = 1,
                            Status = 1,
                            TableId = 6,
                            UserId = 1
                        },
                        new
                        {
                            OrderId = 17,
                            Name = "Table 5 Order",
                            RestaurantId = 1,
                            Status = 0,
                            TableId = 5,
                            UserId = 1
                        },
                        new
                        {
                            OrderId = 21,
                            Name = "Table 1 Order",
                            RestaurantId = 1,
                            Status = 0,
                            TableId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("backend.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("MenuItemId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("OrderItemId");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            OrderItemId = 85,
                            MenuItemId = 6,
                            OrderId = 15,
                            Quantity = 1
                        },
                        new
                        {
                            OrderItemId = 86,
                            MenuItemId = 3,
                            OrderId = 16,
                            Quantity = 1
                        },
                        new
                        {
                            OrderItemId = 87,
                            MenuItemId = 5,
                            OrderId = 16,
                            Quantity = 2
                        },
                        new
                        {
                            OrderItemId = 88,
                            MenuItemId = 6,
                            OrderId = 16,
                            Quantity = 1
                        },
                        new
                        {
                            OrderItemId = 89,
                            MenuItemId = 5,
                            OrderId = 17,
                            Quantity = 1
                        },
                        new
                        {
                            OrderItemId = 90,
                            MenuItemId = 6,
                            OrderId = 17,
                            Quantity = 1
                        },
                        new
                        {
                            OrderItemId = 101,
                            MenuItemId = 3,
                            OrderId = 21,
                            Quantity = 2
                        },
                        new
                        {
                            OrderItemId = 102,
                            MenuItemId = 5,
                            OrderId = 21,
                            Quantity = 2
                        },
                        new
                        {
                            OrderItemId = 103,
                            MenuItemId = 7,
                            OrderId = 21,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("backend.Models.Restaurant", b =>
                {
                    b.Property<int>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RestaurantId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RestaurantId");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            RestaurantId = 1,
                            Address = "Vukovarska",
                            Email = "example@gmail.com",
                            Name = "Index",
                            Phone = "012345678"
                        });
                });

            modelBuilder.Entity("backend.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Name = "admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Name = "chef"
                        },
                        new
                        {
                            RoleId = 3,
                            Name = "waiter"
                        });
                });

            modelBuilder.Entity("backend.Models.Table", b =>
                {
                    b.Property<int>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TableId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("TableId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            TableId = 1,
                            Capacity = 4,
                            RestaurantId = 1,
                            Status = 1,
                            UserId = 3
                        },
                        new
                        {
                            TableId = 2,
                            Capacity = 2,
                            RestaurantId = 1,
                            Status = 0,
                            UserId = 3
                        },
                        new
                        {
                            TableId = 3,
                            Capacity = 6,
                            RestaurantId = 1,
                            Status = 1,
                            UserId = 3
                        },
                        new
                        {
                            TableId = 4,
                            Capacity = 4,
                            RestaurantId = 1,
                            Status = 1,
                            UserId = 1
                        },
                        new
                        {
                            TableId = 5,
                            Capacity = 4,
                            RestaurantId = 1,
                            Status = 0,
                            UserId = 1
                        },
                        new
                        {
                            TableId = 6,
                            Capacity = 4,
                            RestaurantId = 1,
                            Status = 0,
                            UserId = 1
                        },
                        new
                        {
                            TableId = 7,
                            Capacity = 4,
                            RestaurantId = 1,
                            Status = 0,
                            UserId = 1
                        },
                        new
                        {
                            TableId = 8,
                            Capacity = 4,
                            RestaurantId = 1,
                            Status = 0,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("integer");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Password = "adminpass",
                            RestaurantId = 1,
                            RoleId = 1,
                            Username = "adminuser"
                        },
                        new
                        {
                            UserId = 2,
                            Password = "chefpass",
                            RestaurantId = 1,
                            RoleId = 2,
                            Username = "chefuser"
                        },
                        new
                        {
                            UserId = 3,
                            Password = "waiterpass",
                            RestaurantId = 1,
                            RoleId = 3,
                            Username = "waiteruser"
                        },
                        new
                        {
                            UserId = 10,
                            Password = "strelec",
                            RestaurantId = 1,
                            RoleId = 3,
                            Username = "jan"
                        });
                });

            modelBuilder.Entity("backend.Models.Category", b =>
                {
                    b.HasOne("backend.Models.Restaurant", "Restaurant")
                        .WithMany("Categories")
                        .HasForeignKey("RestaurantId");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("backend.Models.MenuItem", b =>
                {
                    b.HasOne("backend.Models.Category", "Category")
                        .WithMany("MenuItems")
                        .HasForeignKey("CategoryId");

                    b.HasOne("backend.Models.Restaurant", "Restaurant")
                        .WithMany("MenuItems")
                        .HasForeignKey("RestaurantId");

                    b.Navigation("Category");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("backend.Models.Order", b =>
                {
                    b.HasOne("backend.Models.Restaurant", "Restaurant")
                        .WithMany("Orders")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Table", "Table")
                        .WithMany("Orders")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("Table");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.OrderItem", b =>
                {
                    b.HasOne("backend.Models.MenuItem", "MenuItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("backend.Models.Table", b =>
                {
                    b.HasOne("backend.Models.Restaurant", "Restaurant")
                        .WithMany("Tables")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("Tables")
                        .HasForeignKey("UserId");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.HasOne("backend.Models.Restaurant", "Restaurant")
                        .WithMany("Users")
                        .HasForeignKey("RestaurantId");

                    b.HasOne("backend.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Restaurant");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("backend.Models.Category", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("backend.Models.MenuItem", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("backend.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("backend.Models.Restaurant", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("MenuItems");

                    b.Navigation("Orders");

                    b.Navigation("Tables");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("backend.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("backend.Models.Table", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Tables");
                });
#pragma warning restore 612, 618
        }
    }
}
